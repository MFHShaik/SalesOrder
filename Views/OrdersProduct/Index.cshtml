@model IEnumerable<SalesOrders.Models.OrdersProductDto>

<h2 class="mb-4">Order Products</h2>

<!-- Accordion for Orders -->
<div class="accordion" id="orderAccordion">
    <!-- Group orders by Order ID -->
    @foreach (var orderGroup in Model.GroupBy(o => o.OrderId))
    {
        <div class="accordion-item">
            <h2 class="accordion-header" id="heading-@orderGroup.Key">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapse-@orderGroup.Key" aria-expanded="false" aria-controls="collapse-@orderGroup.Key">
                    <strong>Order ID: @orderGroup.Key</strong> &nbsp;&nbsp;
                    <span>Total Quantity: @orderGroup.Sum(o => o.Quantity)</span> &nbsp;&nbsp;
                    <span>Total Price: R @orderGroup.Sum(o => o.SalesPrice * o.Quantity).ToString("0.00")</span>
                </button>
            </h2>
            <div id="collapse-@orderGroup.Key" class="accordion-collapse collapse" aria-labelledby="heading-@orderGroup.Key" data-bs-parent="#orderAccordion">
                <div class="accordion-body">
                    <table class="table table-bordered">
                        <thead>
                            <tr>
                                <th>Product ID</th>
                                <th>Product Name</th>
                                <th>Quantity</th>
                                <th>Price (R)</th>
                                <th>Total (R)</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in orderGroup)
                            {
                                <tr>
                                    <td>@item.ProductId</td>
                                    <td>@item.ProductName</td>
                                    <td>@item.Quantity</td>
                                    <td>R @item.SalesPrice.ToString("0.00")</td>
                                    <td>R @(item.SalesPrice * item.Quantity).ToString("0.00")</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }
</div>

<!-- Include Bootstrap CSS -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css">
<!-- Include Bootstrap JS (with bundled Popper.js) -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>

<!-- Ensure Navbar Dropdown Is Clickable and Independent -->
<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Manually ensure accordion works correctly by toggling state on button click
        const accordionButtons = document.querySelectorAll('.accordion-button');
        accordionButtons.forEach(button => {
            button.addEventListener('click', function () {
                const target = document.querySelector(this.dataset.bsTarget);
                if (target.classList.contains('show')) {
                    target.classList.remove('show');
                    this.classList.add('collapsed');
                    this.setAttribute('aria-expanded', 'false');
                } else {
                    target.classList.add('show');
                    this.classList.remove('collapsed');
                    this.setAttribute('aria-expanded', 'true');
                }
            });
        });

        // Ensure navbar dropdown works independently of accordion
        const navbarDropdown = document.querySelector('.navbar .dropdown-toggle');
        navbarDropdown.addEventListener('click', function (e) {
            e.stopPropagation();
            this.parentElement.querySelector('.dropdown-menu').classList.toggle('show');
        });
    });
</script>

<!-- Additional z-index fix if needed for Navbar Dropdown -->
<style>
    .navbar {
        z-index: 1050; /* Ensure navbar stays above other elements */
    }
</style>
